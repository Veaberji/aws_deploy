// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusiciansAPP.DAL.DBDataProvider;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusiciansAPP.DAL.DBDataProvider.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtistArtist", b =>
                {
                    b.Property<Guid>("ReverseSimilarArtistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SimilarArtistsId")
                        .HasColumnType("uuid");

                    b.HasKey("ReverseSimilarArtistsId", "SimilarArtistsId");

                    b.HasIndex("SimilarArtistsId");

                    b.ToTable("SimilarArtists", (string)null);
                });

            modelBuilder.Entity("MusiciansAPP.Domain.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PlayCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MusiciansAPP.Domain.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusiciansAPP.Domain.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PlayCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("ArtistArtist", b =>
                {
                    b.HasOne("MusiciansAPP.Domain.Artist", null)
                        .WithMany()
                        .HasForeignKey("ReverseSimilarArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusiciansAPP.Domain.Artist", null)
                        .WithMany()
                        .HasForeignKey("SimilarArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusiciansAPP.Domain.Album", b =>
                {
                    b.HasOne("MusiciansAPP.Domain.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusiciansAPP.Domain.Track", b =>
                {
                    b.HasOne("MusiciansAPP.Domain.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("MusiciansAPP.Domain.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId");

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusiciansAPP.Domain.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusiciansAPP.Domain.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
